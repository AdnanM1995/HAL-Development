@using Microsoft.AspNetCore.Identity
@using ITMatching.Models
@inject SignInManager<IdentityUser> SignInManager
@inject UserManager<IdentityUser> UserManager
@inject ITMatchingAppContext AppContext
@{
    if (ViewData.TryGetValue("ParentLayout", out var parentLayout))
    {
        Layout = (string)parentLayout;
    }
    else
    {
        Layout = "/Areas/Identity/Pages/_Layout.cshtml";
    }

    bool isUserLoggedIn = SignInManager.IsSignedIn(User);
    bool isExpert = false;
    if (isUserLoggedIn)
    {
        string id = UserManager.GetUserId(User);
        Itmuser itUser = AppContext.Itmusers.Where(u => u.AspNetUserId == id).FirstOrDefault();
        Expert eUser = AppContext.Experts.Where(eu => eu.ItmuserId == itUser.Id).FirstOrDefault();
        isExpert = eUser != null;

        if (isExpert)
        {
            eUser.IsAvailable = false;
            AppContext.Experts.Update(eUser);
            AppContext.SaveChanges();
        }
    }


}


<div class="container">
    <div class="text-center">
        <h1>Account Overview</h1>
        <h3>Review your account settings</h3>
        <br />
    </div>
</div>

<div class="jumbotron" id="AccountJumbotron">
</div>

<div class="container">
    <div class="col-md-12">
        <div class="row justify-content-center mb-3">
            <partial name="_ManageNav" />
        </div>
            @RenderBody()
    </div>
</div>
@section Scripts {
    @RenderSection("Scripts", required: false)
}
